postgresql:
    global:
      postgresql: {}
    fullnameOverride: inventory-postgres
    image:
      debug: false
      pullPolicy: Always
    volumePermissions:
      enabled: true
      image:
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/minideb
        tag: stretch
      securityContext:
        runAsUser: "auto"
    shmVolume:
      chmod:
        enabled: false
    containerSecurityContext:
      enabled: false    
    securityContext:
      enabled: false
      fsGroup: 1001
      runAsUser: 1001
    serviceAccount:
      enabled: true
    replication:
      applicationName: my_application
      enabled: false
      numSynchronousReplicas: 0
      password: repl_password
      slaveReplicas: 1
      synchronousCommit: "off"
      user: repl_user
    postgresqlUsername: "admin"
    existingSecret:  inventory-postgresql-secret 
    usePasswordFile: false
    postgresqlDatabase: "inventory"
    postgresqlDataDir: /bitnami/postgresql/data
    service:
      annotations: {}
      port: 5432
      type: ClusterIP
    persistence:
      accessModes:
      - ReadWriteOnce
      enabled: true
      mountPath: /bitnami/postgresql
      size: 2Gi
      storageClass: stakater 
      subPath: ""
    updateStrategy:
      type: RollingUpdate
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 1Gi
    networkPolicy:
      allowExternal: true
      enabled: false
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
application:
  applicationName: "inventory"
  
  labels:
    group: com.stakater
    team: nordmart
  
  deployment:
    replicas: 2
    volumes: []
    volumeMounts: []
    securityContext: []
    podLabels: []
    additionalPodAnnotations:
      app: "inventory"
      team: "nordmart"
    image:
      repository: DOCKER_REPOSITORY_URL
      tag: IMAGE_TAG
    resources: 
      limits:
        memory: 512Mi
        cpu: 0.5
      requests:
        memory: 128Mi
        cpu: 0.1
    imagePullSecrets: nexus-creds     
    env:
    - name: JAEGER_ENDPOINT
      value: "http://jaeger-collector.istio-system:14268/api/traces"
    - name: POSTGRESQL_HOST
      value: inventory-postgres   
    - name: POSTGRESQL_PASSWORD
      valueFrom:
        secretKeyRef:
          name: inventory-postgresql-secret
          key: postgresql-password
    - name: DB_NAME
      value: "inventory"
    probes:
      readinessProbe:
        failureThreshold: 3
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 1
        initialDelaySeconds: 15
        httpGet:
          path: /actuator/health
          port: 8080
      livenessProbe:
        failureThreshold: 3
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 1
        initialDelaySeconds: 15
        httpGet:
          path: /actuator/health
          port: 8080
  
  # Role based access control
  rbac:
    enabled: true
    serviceAccount:
      enabled: true
  
  # Service configuration
  service:
    ports:
    - port: 8080
      name: http
      targetPort: 8080
  
  # Openshift route
  route:
    enabled: true
    annotations: []
    additionalLabels: 
      router: default
    port:
      targetPort: http
    wildcardPolicy: None
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
  
  # Service monitor to collect prometheus metrices
  serviceMonitor:
    enabled: true
    
    # List of the endpoints of service from which prometheus will scrape data
    endpoints:
    - interval: 5s
      path: /prometheus
      port: http
 
